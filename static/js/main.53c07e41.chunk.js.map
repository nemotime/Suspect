{"version":3,"sources":["App.js","serviceWorker.js","index.js","img/IG_Fill.png"],"names":["photos","src","width","height","MyHeader","header","className","alt","onSticky","onStick","App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","direction","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","href","target","rel","iglogo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yfAQA,IAAMA,EAAS,CACb,CACEC,IAAK,yBACLC,MAAO,EACPC,OAAQ,GAEV,CACEF,IAAK,yBACLC,MAAO,EACPC,OAAQ,GAEV,CACEF,IAAK,yBACLC,MAAO,EACPC,OAAQ,GAEV,CACEF,IAAK,yBACLC,MAAO,EACPC,OAAQ,GAEV,CACEF,IAAK,0BACLC,MAAO,EACPC,OAAQ,GAEV,CACEF,IAAK,0BACLC,MAAO,EACPC,OAAQ,IAgBNC,EAAW,kBACf,kBAAC,IAAD,CAEEC,OACE,yBAAKC,UAAU,eACb,wBAAIA,UAAU,gBAAe,yBAAKA,UAAU,OAAOL,IAAI,sBAAsBM,IAAI,mBAGrFC,cAAUC,GAEV,iCACE,yBAAKH,UAAU,iBAiDNI,MA5Cf,WAAgB,IAAD,EAC2BC,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,KAIPC,EAAeC,uBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDP,EAAgBO,GAChBL,GAAgB,KACf,IAOH,OACA,yBAAKT,UAAU,OACbF,IAED,kBAAC,IAAD,CAASJ,OAAQA,EAAQqB,UAAW,MAAOC,QAASN,IACpD,kBAAC,IAAD,KACEF,EACA,kBAAC,IAAD,CAAOS,QAZY,WACpBV,EAAgB,GAChBE,GAAgB,KAWd,kBAAC,IAAD,CACCS,aAAcZ,EACda,MAAOzB,EAAO0B,KAAI,SAAAC,GAAC,O,yVAAA,IACfA,EADe,CAElBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,cAIX,MAGL,4BAAQzB,UAAU,UACb,0BAAMA,UAAU,WAAhB,mBACJ,uBAAG0B,KAAK,wCAAwCC,OAAO,SAASC,IAAI,uBACnE,yBAAK5B,UAAU,SAASC,IAAI,YAAYN,IAAKkC,UC9F9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.53c07e41.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport Gallery from 'react-photo-gallery'\nimport iglogo from './img/IG_Fill.png'\nimport StickyHeader from 'react-sticky-header';\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport 'react-sticky-header/styles.css';\n\nconst photos = [\n  {\n    src: '/images/black-tee1.jpg',\n    width: 2,\n    height: 3\n  },\n  {\n    src: '/images/black-tee2.jpg',\n    width: 2,\n    height: 3\n  },\n  {\n    src: '/images/black-tee3.jpg',\n    width: 2,\n    height: 3\n  },\n  {\n    src: '/images/black-tee4.jpg',\n    width: 3,\n    height: 2\n  },\n  {\n    src: '/images/maroon-tee1.jpg',\n    width: 2,\n    height: 3\n  },\n  {\n    src: '/images/maroon-tee2.jpg',\n    width: 2,\n    height: 3\n  }\n];\n\n// function columns(containerWidth) {\n//   let columns = 1;\n//   if (containerWidth >= 500) columns = 3;\n//   if (containerWidth >= 900) columns = 4;\n//   if (containerWidth >= 1500) columns = 5;\n//   return columns;\n// }\n\nconst onStick = () => {\n\n}\n\nconst MyHeader = () => (\n  <StickyHeader\n    // This is the sticky part of the header.\n    header={\n      <div className=\"Header_root\">\n        <h1 className=\"Header_title\"><img className='logo' src='/images/suspect.png' alt='Suspect logo'/></h1>\n      </div>\n    }\n    onSticky={onStick()}\n  >\n    <section>\n      <div className=\"nonSticky\"></div>\n    </section>\n  </StickyHeader>\n);\n\nfunction App() {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n\t\t<div className='App'>\n\t\t\t{MyHeader()}\n\n\t\t\t<Gallery photos={photos} direction={'row'} onClick={openLightbox} />\n\t\t\t<ModalGateway>\n\t\t\t\t{viewerIsOpen ? (\n\t\t\t\t\t<Modal onClose={closeLightbox}>\n\t\t\t\t\t\t<Carousel\n\t\t\t\t\t\t\tcurrentIndex={currentImage}\n\t\t\t\t\t\t\tviews={photos.map(x => ({\n\t\t\t\t\t\t\t\t...x,\n\t\t\t\t\t\t\t\tsrcset: x.srcSet,\n\t\t\t\t\t\t\t\tcaption: x.title,\n\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Modal>\n\t\t\t\t) : null}\n\t\t\t</ModalGateway>\n\n\t\t\t<footer className='footer'>\n        <span className='contact'>Contact via DM </span>\n\t\t\t\t<a href='https://www.instagram.com/suspect.la/' target='_blank' rel='noopener noreferrer'>\n\t\t\t\t\t<img className='iglogo' alt='Instagram' src={iglogo} />\n\t\t\t\t</a>\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/IG_Fill.494bf877.png\";"],"sourceRoot":""}